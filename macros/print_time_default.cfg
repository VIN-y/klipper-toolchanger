####################################################################################
#	                         Working Functions
####################################################################################
#--------------------------------------------------------------------
[gcode_macro PRINT_START]
gcode:
    RESPOND TYPE=echo MSG='PRINT_START...'
    ## Set print time variables -------------------------------------
    SET_GCODE_VARIABLE MACRO=_print_time VARIABLE=printing VALUE=1
    RESPOND TYPE=echo MSG='Set Wipe Tower Location...'
    # {% if "WIPE_TOWER_X" in params %}
    #     SET_GCODE_VARIABLE  MACRO=_global_variable  VARIABLE=wipe_x  VALUE={ params.WIPE_TOWER_X|float }
    # {% endif %}
    # {% if "WIPE_TOWER_Y" in params %}
    #     SET_GCODE_VARIABLE  MACRO=_global_variable  VARIABLE=wipe_y  VALUE={ params.WIPE_TOWER_Y|float }
    # {% endif %}
    # {% if "FIRST_LAYER_HEIGHT" in params %}
    #     SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=first_layer_height  VALUE={ params.FIRST_LAYER_HEIGHT|float }
    # {% endif %}
    ## Bed heating & Active chamber thermal control -----------------
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.BED_TEMP}
    RESPOND TYPE=echo MSG='{"Fan on..."}'
    {% if 'fan_generic fan_nevermore_stealthmax' in printer.configfile.config %}
        {% if params.BED_TEMP|int > 80 %}
            SET_FAN_SPEED FAN=fan_nevermore_stealthmax SPEED=0.75
        {% else %}
            SET_FAN_SPEED FAN=fan_nevermore_stealthmax SPEED=1.00
        {% endif %}
    {% endif %}
    {% if 'fan_generic fan_chamber_heater' in printer.configfile.config %}
        {% if params.BED_TEMP|int > 80 %}
            SET_FAN_SPEED FAN=fan_chamber_heater SPEED=1.00
        {% endif %}
    {% endif %}
    M190 S{params.BED_TEMP}
    ## Tool-head heating --------------------------------------------
    {% for tool_nr in printer.toolchanger.tool_numbers %}
        M104 T{tool_nr} S0                                  # Disable all slicer injected toolhead temperature settings.
    {% endfor %}
    M104 T0 S150
    ## Quad gantry leveling -----------------------------------------
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    {% if printer['quad_gantry_level'].applied == False %}
        RESPOND TYPE=echo MSG='Quad Gantry Level...'
        QUAD_GANTRY_LEVEL
    {% endif %}
    ## Final home ---------------------------------------------------
    T0
    M109 T0 S150                                            # Heat up to account for thermal expansion.
    {% if printer["gcode_macro _home"].dock == True %}
        G1 Z{printer['toolchanger'].params_min_z} F9000
        _CLEAN_MID_PRINT
    {% endif %}
    G28                                                     # Homing
    ## Bes Mesh -----------------------------------------------------
    BED_MESH_CLEAR                                          # Unloading net beds
    {% if printer['exclude_object'].objects == null %}
        BED_MESH_PROFILE LOAD=full_bed                      # Loading the net bed
    {% else %}
        BED_MESH_CALIBRATE                                  # BED_MESH_CALIBRATE
    {% endif %}
    ## Set print temps ----------------------------------------------
    RESPOND TYPE=echo MSG='Set Print Temps...'
    {% if "T0_TEMP" in params %}
        M104 T0 S{ params.T0_TEMP }                         # If T0 is used, set it to print temp
        SET_GCODE_VARIABLE  MACRO=T0  VARIABLE=print_temp  VALUE={params.T0_TEMP}
    {% else %}
        M104 T0 S0                                          # Else, turn T0 off
    {% endif %}
    {% if "T1_TEMP" in params %}
        M104 T1 S{ params.T1_TEMP }                         # If T1 is used, set it to print temp
        SET_GCODE_VARIABLE  MACRO=T1  VARIABLE=print_temp  VALUE={params.T1_TEMP}
    {% endif %}
    {% if "T2_TEMP" in params %}
        M104 T2 S{ params.T2_TEMP }                         # If T2 is used, set it to print temp
        SET_GCODE_VARIABLE  MACRO=T2 VARIABLE=print_temp  VALUE={params.T2_TEMP}
    {% endif %}
    {% if "T3_TEMP" in params %}
        M104 T3 S{ params.T3_TEMP }                         # If T3 is used, set it to print temp
        SET_GCODE_VARIABLE  MACRO=T3  VARIABLE=print_temp  VALUE={params.T3_TEMP}
    {% endif %}
    ## Set toolhead need_clean flag ---------------------------------
    {% if params.FIRST_LAYER_PRINT_SIZE|float < printer['gcode_macro _static_variable'].clean_threshold %}
        RESPOND TYPE=echo MSG='Small print job, no material setting needed'
    {% else %}
        {% for material in printer['toolchanger'].params_need_clean_materials %}
            {% if "T0_FIL" in params %}
                {% if params.T0_FIL|string == material|string %}
                    SET_GCODE_VARIABLE  MACRO=T0  VARIABLE=need_clean  VALUE=1
                {% endif %}
            {% endif %}
            {% if "T1_FIL" in params %}
                {% if params.T1_FIL|string == material|string %}
                    SET_GCODE_VARIABLE  MACRO=T1  VARIABLE=need_clean  VALUE=1
                {% endif %}
            {% endif %}
            {% if "T2_FIL" in params %}
                {% if params.T2_FIL|string == material|string %}
                    SET_GCODE_VARIABLE  MACRO=T2  VARIABLE=need_clean  VALUE=1
                {% endif %}
            {% endif %}
            {% if "T3_FIL" in params %}
                {% if params.T3_FIL|string == material|string %}
                    SET_GCODE_VARIABLE  MACRO=T3  VARIABLE=need_clean  VALUE=1
                {% endif %}
            {% endif %}
        {% endfor %}
    {% endif %}
    ## Move to the corner -------------------------------------------
    G1 X10 Y120 F9000
    ## Wait for print temps -----------------------------------------
    RESPOND TYPE=echo MSG='Wait For Nozzles Temp...'
    {% if "T0_TEMP" in params %}
        M109 T0 S{ params.T0_TEMP }
    {% endif %}
    # ## Clean off the inital ooze ------------------------------------
    # {% if printer["gcode_macro _home"].dock == True %}
    #     {% if "FIRST_LAYER_HEIGHT" in params %}
    #         G1 Z{params.FIRST_LAYER_HEIGHT} F9000
    #     {% endif %}
    # {% else %}
    ## Purge --------------------------------------------------------
    {% if printer["gcode_macro _home"].dock != True %}
        RESPOND TYPE=echo MSG='Purge...'
        G90
        G92 E0                                              # Reset Extruder
        G1 Z2.0 F3000                                       # Move Z Axis up
        G1 X5.1 Y120.0 Z0.28 F5000.0                        # Move to start position
        G1 X5.1 Y300.0 Z0.28 F1500.0 E17                    # Draw the first line
        G1 X5.4 Y300.0 Z0.28 F5000.0                        # Move to side a little
        G1 X5.4 Y120.0 Z0.28 F1500.0 E32                    # Draw the second line
        G92 E0                                              # Reset Extruder
        G90
    {% endif %}
    ## Skew ---------------------------------------------------------
    {% if 'skew_correction' in printer.configfile.config %}
        SET_SKEW CLEAR=1                                    # Clear skew compensation
        SKEW_PROFILE LOAD=calilantern_skew_profile          # Load skew compensation
    {% endif %}
    ## Account for frame thermal expansion --------------------------
    {% if printer['gcode_macro _static_variable'].thermo_expand_temp_low > 0 %}
        {% if printer['temperature_sensor Chamber'].temperature > printer['gcode_macro _static_variable'].thermo_expand_temp_low %}
            ## Variables
            {% set chamber_temp = printer['temperature_sensor Chamber'].temperature %}
            {% set max_offset = printer['gcode_macro _static_variable'].thermo_expand_offset %}
            {% set temp_high = printer['gcode_macro _static_variable'].thermo_expand_temp_high %}
            {% set temp_low = printer['gcode_macro _static_variable'].thermo_expand_temp_low %}
            ## Calculations
            {% set z_offset = ((chamber_temp-temp_low)/(temp_high-temp_low)*max_offset)|round(3, 'common') %}
            ## Apply z-offset
            RESPOND TYPE=echo MSG='Account for thermal expansion {z_offset}...'
            SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=thermo_z_offset   VALUE={z_offset}
            SET_GCODE_OFFSET Z_ADJUST={z_offset} MOVE=1
        {% endif %}
    {% endif %}
    ## --------------------------------------------------------------
    RESPOND TYPE=echo MSG='Printing...'

#--------------------------------------------------------------------
[gcode_macro PRINT_END]                                     # Set PRINT_END as the end-of-print macro to customise the after-print action.
gcode:
    ## Clear print variables 1 --------------------------------------
    SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=printing            VALUE=0
    # SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=first_layer_height  VALUE=0.0
    # SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=wipe_x              VALUE=0.0
    # SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=wipe_y              VALUE=0.0
    ## Clear cache --------------------------------------------------
    M400                                                    # finish off and clear buffer
    RESPOND TYPE=echo MSG='PRINT_END...'
    ## --------------------------------------------------------------
    G91                                                     # relative position
    G0 Z1.00 F9000                                          # Remove nozzle
    G90
    _CLEAN_MID_PRINT
    ## Clear print variables 2 --------------------------------------
    T0
    SET_GCODE_OFFSET Z_ADJUST={-1*printer['gcode_macro _print_time'].thermo_z_offset} MOVE=1
    TURN_OFF_HEATERS                                        # Close the hot end
    _TOOLCHANGER_DISABLE_EXTRUDER_STEPPERS                  # Disable all extruders
    _TOOLCHANGER_TURN_OFF_FANS                              # Turn off all part fans
    BED_MESH_CLEAR                                          # Unloading net beds
    SET_SKEW CLEAR=1                                        # Clear skew compensation
    SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=thermo_z_offset   VALUE=0.0
    {% for tool_nr in printer.toolchanger.tool_numbers %}
        SET_GCODE_VARIABLE  MACRO=T{tool_nr}  VARIABLE=need_clean  VALUE=0
        SET_GCODE_VARIABLE  MACRO=T{tool_nr}  VARIABLE=print_temp  VALUE=0
    {% endfor %}
    ## --------------------------------------------------------------
    {% if printer.toolhead.position[2]|float < printer['toolchanger'].params_max_z|float %}
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-20} Z{printer['toolchanger'].params_max_z|float} F9000
    {% else %}
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-20} F9000
    {% endif %}
    STOP_TOOL_PROBE_CRASH_DETECTION
    ## --------------------------------------------------------------
    RESPOND TYPE=echo MSG='{"Fan off..."}'
    {% if 'fan_generic fan_nevermore_stealthmax' in printer.configfile.config %}
        SET_FAN_SPEED FAN=fan_nevermore_stealthmax SPEED=0.00
    {% endif %}
    {% if 'fan_generic fan_chamber_heater' in printer.configfile.config %}
        SET_FAN_SPEED FAN=fan_chamber_heater SPEED=0.00
    {% endif %}
    ## --------------------------------------------------------------
    RESPOND TYPE=echo MSG='Finished...'

#--------------------------------------------------------------------
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% set z = params.Z|default(10)|int %}                                                   ; zhop amount
    {% set crash = params.CRASH|default(0)|int %}                                            ; zhop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        ## set hotend temp variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[printer['toolhead'].extruder].target}
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if crash == 0 %}                                                                  ; if pause is not due to crash
            {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}   ; check that zhop doesn't exceed z max
                G91                                                                          ; relative positioning
                G1 Z{z} F900                                                                 ; raise Z up by z hop amount
            {% else %}
                { action_respond_info("Pause zhop exceeds maximum Z height.") }              ; if z max is exceeded, show message and set zhop value for resume to 0
                SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
            {% endif %}
            G90                                                                              ; absolute positioning
            G1 X{printer.toolhead.axis_maximum.x-20} Y{printer.toolhead.axis_maximum.y-20} F10000
        {% endif %}
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        {% for tool_nr in printer.toolchanger.tool_numbers %}
            M104 T{tool_nr} S0
        {% endfor %}
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)
    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        INITIALIZE_TOOLCHANGER
        START_TOOL_PROBE_CRASH_DETECTION
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %} 
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}      ; set timeout back to configured value
    CLEAR_PAUSE
    # SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

####################################################################################
#	                         Hidden Functions
####################################################################################
#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_TURN_OFF_FANS]
description: Disable all extruder steppers
gcode:
    {% for tool_nr in printer.toolchanger.tool_numbers %}
        M107 T{tool_nr}
    {% endfor %}

#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_DISABLE_EXTRUDER_STEPPERS]
description: Disable all extruder steppers
gcode:
    {% for toolname in printer.toolchanger.tool_names %}
        SET_STEPPER_ENABLE STEPPER={printer[toolname].extruder} ENABLE=0
    {% endfor %}
