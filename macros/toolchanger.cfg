# Original written by Viesturs Zarins
# Modified by Justin F. Hallett
# Modified by Chinh Nhan Vo
#
#--------------------------------------------------------------------
[gcode_macro _BEFORE_SELECT_TOOL]
gcode:
    # M400
    # ## Fan control
    # _fan_speed TOOL={params.TOOL}
    # M400

#--------------------------------------------------------------------
[gcode_macro _TOOL_BEFORE_CHANGE]
gcode:
    M400
    {% set tn   = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    ## LED setting
    {% if printer["gcode_macro T" + tool.tool_number|string ] %}
        SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="''"
    {% endif %}
    M400

#--------------------------------------------------------------------
[gcode_macro _TOOL_DROPOFF]
gcode:
    M400
    ## Variables
    {% set tn     = params.TN|string %}
    {% set tool   = printer['tool ' + tn] %}
    {% set x      = tool.params_park_x|float %}
    {% set y      = tool.params_park_y|float %}
    {% set z      = tool.params_park_z|float %}
    {% set safe_y = tool.params_safe_y|float %}
    {% set fast   = tool.params_fast_speed|float %}
    {% set path   = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set max_z  = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set min_z  = tool.params_min_z|float %}
    {% set cur_z  = printer.toolhead.position[2]|float %}
    ## Move to the dock
    G90
    {% if cur_z < min_z %}
        _CLIENT_LINEAR_MOVE X={x} Y={safe_y} Z={min_z+1.0} F={fast} ABSOLUTE=1
    {% else %}
        _CLIENT_LINEAR_MOVE X={x} Y={safe_y} Z={[cur_z+1.0, max_z]|min} F={fast} ABSOLUTE=1
    {% endif %}
    _CLIENT_LINEAR_MOVE Y={y + path[0]['y']|float} F={fast} ABSOLUTE=1     # Move to the first point in the path, in the y axis
    M400                                      # Clear cache
    ## Run the path
    {% for pos in path %}
        {% if pos['d']|int == 1 %}
            _CLIENT_LINEAR_MOVE X={x + pos['x']|float} Y={y + pos['y']|float} F={tool.params_path_speed|float * (pos.get('f', 1.0)|float)}  ABSOLUTE=1
        {% endif %}
    {% endfor %}
    ## Finishing
    M106 S0 T{tool.tool_number}               # Turn off part fan of current tool
    M400                                      # Clear cache

#--------------------------------------------------------------------
[gcode_macro _TOOL_PICKUP]
gcode:
    M400
    ## Variables
    {% set tn      = params.TN|string %}
    {% set tool    = printer['tool ' + tn] %}
    {% set x       = tool.params_park_x|float %}
    {% set y       = tool.params_park_y|float %}
    {% set z       = tool.params_park_z|float %}
    {% set safe_y  = tool.params_safe_y|float %}
    {% set close_y = tool.params_close_y|float %}
    {% set cur_z   = printer.toolhead.position[2]|float %}
    {% set fast    = tool.params_fast_speed|float %}
    {% set path    = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set fspeed  = (printer[tool.fan].speed * 255)|default(0)|int %}
    M400
    {% if printer.tool_probe_endstop.active_tool_number|int == -1 %}
        ## Fast to the last point
        G90
        _CLIENT_LINEAR_MOVE Y={close_y} F={fast} ABSOLUTE=1
        _CLIENT_LINEAR_MOVE X={x + path[-1]['x']|float} F={fast} ABSOLUTE=1
        _CLIENT_LINEAR_MOVE Y={y + path[-1]['y']|float} F={fast} ABSOLUTE=1
        ## Temporary turn off part fan
        M106 S0 T{tool.tool_number}
        ## Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
        {% if tool.extruder %}
            {% set macroparameter = "gcode_macro T" ~ tool.tool_number|string %}
            {% if printer[macroparameter].print_temp > 0 and printer["gcode_macro _print_time"].printing|int == 1 %}
                M109 T{tool.tool_number} S{printer[macroparameter].print_temp|int}
            {% else %}
                M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
            {% endif %}
        {% endif %}
        ## Run the path in reverse
        {% for pos in path|reverse %}
            _CLIENT_LINEAR_MOVE X={x + pos['x']|float} Y={y + pos['y']|float} F={tool.params_path_speed|float * (pos.get('f', 1.0)|float) } ABSOLUTE=1
        {% endfor %}    
        _CLIENT_LINEAR_MOVE Y={safe_y} Z={cur_z-1.0} F={fast} ABSOLUTE=1         # Get to safe y
        # RESPOND TYPE=echo MSG='Part fan speed: {(fspeed / 255 * 100)|round(2, 'common')}%'
        M106 S{fspeed} T{tool.tool_number}
        M400                                      # Clear cache
    {% else %}
        RESPOND TYPE=error MSG='DROP-OFF FAILED'
    {% endif %}
    M400

#--------------------------------------------------------------------
[gcode_macro _TOOL_AFTER_CHANGE]
gcode:
    M400
    ## Variables
    {% set tn = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    {% if printer.tool_probe_endstop.active_tool_number|int != -1 %}
        ## LED setting
        {% if printer["gcode_macro T" + tool.tool_number|string ] %}
            SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="'c44'"
        {% endif %}
        ## Input shaper
        {% if 'input_shaper' in printer.configfile.config %}
            {% set default_x_freq = printer.configfile.config['input_shaper']['shaper_freq_x']|default(0)|float %}
            {% set default_x_type = printer.configfile.config['input_shaper']['shaper_type_x']|default('mzv')|string %}
            {% set default_x_damping = printer.configfile.config['input_shaper']['damping_ratio_x']|default(0.1)|float %}
            {% set default_y_freq = printer.configfile.config['input_shaper']['shaper_freq_y']|default(0)|float %}
            {% set default_y_type = printer.configfile.config['input_shaper']['shaper_type_y']|default('mzv')|string %}
            {% set default_y_damping = printer.configfile.config['input_shaper']['damping_ratio_y']|default(0.1)|float %}
            SET_INPUT_SHAPER SHAPER_TYPE_X={tool.params_input_shaper_type_x if tool.params_input_shaper_type_x else default_x_type} SHAPER_FREQ_X={tool.params_input_shaper_freq_x if tool.params_input_shaper_freq_x else default_x_freq} SHAPER_TYPE_Y={tool.params_input_shaper_type_y if tool.params_input_shaper_type_y else default_y_type} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y if tool.params_input_shaper_freq_y else default_y_freq} DAMPING_RATIO_X={tool.params_input_shaper_damping_ratio_x if tool.params_input_shaper_damping_ratio_x else default_x_damping} DAMPING_RATIO_Y={tool.params_input_shaper_damping_ratio_y if tool.params_input_shaper_damping_ratio_y else default_y_damping}
        {% endif %}
    {% endif %}
    M400

#--------------------------------------------------------------------
[gcode_macro _AFTER_SELECT_TOOL]
gcode:
    M400
    {% set macroparameter = "gcode_macro T" ~ params.TOOL|string %}
    {% set tool           = printer["tool T" + params.TOOL|string] %}
    {% set fast           = tool.params_fast_speed|default(9000)|float %}
    {% set safe_y         = tool.params_safe_y|float %}
    {% set res_z          = printer["gcode_macro _print_time"].restore_z %}
    {% set max_z          = printer.configfile.config["stepper_z"]["position_max"]|float %}
    ## IF toolchange failed
    {% if printer.tool_probe_endstop.active_tool_number|int == -1 %}
        RESPOND TYPE=error MSG='TOOLCHANGE FAILED'
        {% if printer["gcode_macro _print_time"].printing|int == 1 %}
            SET_GCODE_VARIABLE  MACRO=PAUSE  VARIABLE=crash  VALUE=1
            CLEAR_PAUSE
            PAUSE
        {% else %}
            TURN_OFF_HEATERS
            M84
        {% endif %}
    ## If toolchange success
    {% else %}
        ## Clean the nozzle during print time
        {% if printer["gcode_macro _print_time"].printing|int == 1 and printer[macroparameter].need_clean|int == 1 %}
            RESPOND TYPE=echo MSG='Clean nozzle'
            _CLEAN_MID_PRINT
        {% endif %}
        M400
        ## Turn on/off crash detection on active tool
        {% if printer["gcode_macro _static_variable"].alway_on_crash_detection == 0 and printer["gcode_macro _print_time"].printing|int == 0 %}
            STOP_TOOL_PROBE_CRASH_DETECTION
        {% else %}
            START_TOOL_PROBE_CRASH_DETECTION T={params.TOOL}
        {% endif %}
        M400
        ## Restore the position
        {% if 'X' in restore_position and 'Y' in restore_position and 'Z' in restore_position %}
            _CLIENT_LINEAR_MOVE X={restore_position.X} Y={restore_position.Y} Z={restore_position.Z} F={fast} ABSOLUTE=1
        {% else %}
            {% if 'X' in restore_position and 'Y' in restore_position %}
                _CLIENT_LINEAR_MOVE X={restore_position.X} Y={restore_position.Y} F={fast} ABSOLUTE=1
            {% else %}
                {% if 'X' in restore_position %}
                    _CLIENT_LINEAR_MOVE X={restore_position.X} F={fast} ABSOLUTE=1
                {% endif %}
                {% if 'Y' in restore_position %}
                    _CLIENT_LINEAR_MOVE Y={restore_position.Y} F={fast} ABSOLUTE=1
                {% endif %}
                {% if 'Z' in restore_position %}
                    _CLIENT_LINEAR_MOVE Z={restore_position.Z} F={fast} ABSOLUTE=1
                {% endif %}
            {% endif %}
        {% endif %}
        M400
    {% endif %}
    M400

#--------------------------------------------------------------------
## Support Macros
#--------------------------------------------------------------------
# [gcode_macro _fan_speed]
# gcode:
#     M400
#     {% set tool = printer[printer['toolchanger'].tool] %}
#     M106 S{printer[tool.fan].speed * 255|default(0)|int} T{params.TOOL}
#     M400                                      # Clear cache

#--------------------------------------------------------------------
[gcode_macro _print_time]
variable_printing: 0                         # Printing indicator. "0" = not printing, "1" = is printing
variable_first_layer_height: 0.0             # first layer height
variable_wipe_x: 0.0                         # Wipe tower y position
variable_wipe_y: 0.0                         # Wipe tower y position
variable_thermo_z_offset: 0.0                # Thermo expansion z offset
gcode:                                       # This is here to appease klipper

#--------------------------------------------------------------------
## Others
#--------------------------------------------------------------------
[gcode_macro _TAP_PROBE_ACTIVATE]
gcode:
    {% set max_temp    = params.TEMP|default(150)|int %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    ## Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
    {% if printer.tool_probe_endstop.active_tool_number|int == -1 %}
        RESPOND TYPE=error MSG='Failed to detect active tool'
        {% if printer["gcode_macro _print_time"].printing|int == 1 %}
            SET_GCODE_VARIABLE  MACRO=PAUSE  VARIABLE=crash  VALUE=1
            CLEAR_PAUSE
            PAUSE
        {% endif %}
    {% else %}
        INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
    {% endif %}
 
#--------------------------------------------------------------------
## Crash responds
#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_CRASH]
gcode:
    {% if printer["gcode_macro _print_time"].printing|int == 1 %}
        RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print'
        SET_GCODE_VARIABLE  MACRO=PAUSE  VARIABLE=crash  VALUE=1
        CLEAR_PAUSE
        PAUSE
    {% else %}
        RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}'
        TURN_OFF_HEATERS
        M84
    {% endif %}
