# Original written by Viesturs Zarins
# Modified by Justin F. Hallett
# Modified by Chinh Nhan Vo, Dec 2024
#
#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_VARS]
variable_fan_speed: 0                        # Active part cooling fan speed
gcode:                                       # This is here to appease klipper
#--------------------------------------------------------------------
[gcode_macro _print_time]
description: Global dynamic variables that is used through out the configs
variable_printing: 0                         # Printing indicator. "0" = not printing, "1" = is printing
variable_wipe_x: 0.0                         # Wipe tower x position
variable_wipe_y: 0.0                         # Wipe tower y position
variable_restore_z: 0.0                      # Restore z position
gcode:                                       # This is here to appease klipper

#--------------------------------------------------------------------
[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = params.TEMP|default(150)|int %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TOOL_BEFORE_CHANGE]
gcode:
    {% set tn = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    {% if printer["gcode_macro T" + tool.tool_number|string ] %}
        SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="''"
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TOOL_AFTER_CHANGE]
gcode:
    {% set tn = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% if printer["gcode_macro T" + tool.tool_number|string ] %}
        SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="'c44'"
    {% endif %}
    {% if 'input_shaper' in printer.configfile.config %}
        {% set default_x_freq = printer.configfile.config['input_shaper']['shaper_freq_x']|default(0)|float %}
        {% set default_x_type = printer.configfile.config['input_shaper']['shaper_type_x']|default('mzv')|string %}
        {% set default_x_damping = printer.configfile.config['input_shaper']['damping_ratio_x']|default(0.1)|float %}
        {% set default_y_freq = printer.configfile.config['input_shaper']['shaper_freq_y']|default(0)|float %}
        {% set default_y_type = printer.configfile.config['input_shaper']['shaper_type_y']|default('mzv')|string %}
        {% set default_y_damping = printer.configfile.config['input_shaper']['damping_ratio_y']|default(0.1)|float %}
        SET_INPUT_SHAPER SHAPER_TYPE_X={tool.params_input_shaper_type_x if tool.params_input_shaper_type_x else default_x_type} SHAPER_FREQ_X={tool.params_input_shaper_freq_x if tool.params_input_shaper_freq_x else default_x_freq} SHAPER_TYPE_Y={tool.params_input_shaper_type_y if tool.params_input_shaper_type_y else default_y_type} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y if tool.params_input_shaper_freq_y else default_y_freq} DAMPING_RATIO_X={tool.params_input_shaper_damping_ratio_x if tool.params_input_shaper_damping_ratio_x else default_x_damping} DAMPING_RATIO_Y={tool.params_input_shaper_damping_ratio_y if tool.params_input_shaper_damping_ratio_y else default_y_damping}
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TOOL_DROPOFF]
gcode:
    ## Variables
    {% set tn = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set safe_y = tool.params_safe_y|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set min_z = tool.params_min_z|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    M400

    # Record current z position
    SET_GCODE_VARIABLE  MACRO=_print_time  VARIABLE=restore_z VALUE={cur_z}
    
    ## Move to the dock
    G90
    {% if cur_z < min_z %}
        G0 X{x} Y{safe_y} Z{min_z} F{fast}
    {% else %}
        G0 X{x} Y{safe_y} Z{[cur_z+1.0, max_z]|min} F{fast}
    {% endif %}
    G0 Y{y + path[0]['y']|float} F{fast}      # Move to the first point in the path, in the y axis
    M400                                      # Clear cache
    STOP_TOOL_PROBE_CRASH_DETECTION           # Stop crash detection
    M400                                      # Clear cache
    
    ## Run the path
    {% for pos in path %}
        {% if pos['d']|int == 1 %}
            G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float)}
        {% endif %}
    {% endfor %}

    ## Turn off part fan
    SET_GCODE_VARIABLE MACRO=_TOOLCHANGER_VARS VARIABLE=fan_speed VALUE={ printer[tool.fan].speed * 255|default(0)|int }
    M106 S0 T{tn}

#--------------------------------------------------------------------
[gcode_macro _TOOL_PICKUP]
gcode:
    ## Variables
    {% set tn = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set safe_y = tool.params_safe_y|float %}
    {% set close_y = tool.params_close_y|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set min_z = tool.params_min_z|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    M400

    ## Fast to the last point
    G90
    G0 Y{close_y} F{fast}
    G0 X{x + path[-1]['x']|float} F{fast}
    G0 Y{y + path[-1]['y']|float} F{fast}
    
    ## Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    {% if tool.extruder %}
        {% set macroparameter = "gcode_macro T" ~ tool.tool_number|string %}
        {% if printer[macroparameter].print_temp > 0 and printer["gcode_macro _print_time"].printing|int == 1 %}
            M109 T{tool.tool_number} S{printer[macroparameter].print_temp|int}
        {% else %}
            M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
        {% endif %}
    {% endif %}

    ## Run the path in reverse
    {% for pos in path|reverse %}
        G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}

    ## Check for fail pick-up
    {% if printer.tool_probe_endstop.active_tool_number|int == -1 %}
        SELECT_TOOL_ERROR MESSAGE="Failed tool pick-up..."
    {% else %}

    G0 Y{safe_y} Z{[cur_z-1.0, min_z]|max} F{fast}    # Get to safe y
    M400                                              # Clear cache

    ## Turn on part fan
    M106 S{printer["gcode_macro _TOOLCHANGER_VARS"].fan_speed} T{tn}

#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_CRASH_PAUSE]
description: TBD
gcode:
    {% if printer["gcode_macro _print_time"].printing|int == 1 %}
        RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}. Pausing the print.'
        {% if printer['pause_resume'].is_paused|int == 0 %}
            ## set hotend temp variable for reference in resume macro
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[printer['toolhead'].extruder].target}
            SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
            BASE_PAUSE                                                                           ; pause print
            SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
            {% for tool_nr in printer.toolchanger.tool_numbers %}
                M104 T{tool_nr} S0
            {% endfor %}
            SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
        {% endif %}
    {% else %}
        RESPOND TYPE=error MSG='Tool not detected, expected {printer.toolchanger.tool_number}'
        TURN_OFF_HEATERS
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = params.TEMP|default(150)|int %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
    {% if printer.tool_probe_endstop.active_tool_number|int == -1 %}
        RESPOND TYPE=error MSG='Failed to detect active tool'
        {% if printer["gcode_macro _print_time"].printing|int == 1 %}
            BASE_PAUSE
        {% endif %}
    {% else %}
        INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _AFTER_TOOLCHANGE]
gcode:
    {% set macroparameter = "gcode_macro T" ~ printer.tool_probe_endstop.active_tool_number|string %}
    {% set wx = printer["gcode_macro _print_time"].wipe_x|float %}
    {% set wy = printer["gcode_macro _print_time"].wipe_y|float %}
    {% set fast = printer['toolchanger'].params_fast_speed|default(9000)|float %}

    ## Clean the PETG nozzle during print time
    {% if printer["gcode_macro _print_time"].printing|int == 1 and printer[macroparameter].material|int == 2 %}
        RESPOND TYPE=echo MSG='Clean PETG Nozzle...'
        _CLEAN_MID_PRINT
    {% else %}
        STOP_TOOL_PROBE_CRASH_DETECTION       # Stop crash detection
    {% endif %}

    ## If the wipe tower is defined go straight there after the first layer
    {% if wx > 0 and wy > printer['toolchanger'].params_safe_y and printer["gcode_macro _print_time"].restore_z > 0.3 %}
        G0 X{wx - 0.4} Y{wy - 0.4} Z{restore_position.Z} F{fast}
    {% endif %}

    ## Restore the position
    {% if 'X' in restore_position and 'Y' in restore_position and 'Z' in restore_position %}
        G0 X{restore_position.X} Y{restore_position.Y} Z{restore_position.Z} F{fast}
    {% else %}
        {% if 'X' in restore_position and 'Y' in restore_position %}
            G0 X{restore_position.X} Y{restore_position.Y} F{fast}
        {% else %}
            {% if 'X' in restore_position %}
                G0 X{restore_position.X} F{fast}
            {% endif %}
            {% if 'Y' in restore_position %}
                G0 Y{restore_position.Y} F{fast}
            {% endif %}
            {% if 'Z' in restore_position %}
                G0 Z{restore_position.Z} F{fast}
            {% endif %}
        {% endif %}
    {% endif %}
