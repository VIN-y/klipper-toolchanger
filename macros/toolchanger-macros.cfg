# Original written by Viesturs Zarins
# Modified by Justin F. Hallett
# Modified by Chinh Nhan Vo, Dec 2024
#
#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_VARS]
variable_fan_speed: 0
gcode:

#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_DISABLE_EXTRUDER_STEPPERS]
description: Disable all extruder steppers
gcode:
  {% for toolname in printer.toolchanger.tool_names %}
    SET_STEPPER_ENABLE STEPPER={printer[toolname].extruder} ENABLE=0
  {% endfor %}

####################################################################################
#                        Marcos overwrite
####################################################################################
#--------------------------------------------------------------------
[gcode_macro M104]
rename_existing: M104.1
description: [T<index>] [S<temperature>]
  Set tool temperature.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE{newparameters}
  {% else %}
    M104.1 {rawparams}
  {% endif %}

#--------------------------------------------------------------------
[gcode_macro M109]
rename_existing: M109.1
description: [T<index>] [S<temperature>]
  Set tool temperature and wait.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
gcode:
  {% if params.T is defined %}
    {% set newparameters = "" %}
    {% set newparameters = newparameters ~ " T="~params.T %}
    {% if params.S is defined %}
      {% set newparameters = newparameters ~ " TARGET="~params.S %}
    {% endif %}
    SET_TOOL_TEMPERATURE WAIT=1 {newparameters}
  {% else %}
    M109.1 {rawparams}
  {% endif %}

#--------------------------------------------------------------------
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BASE_BED_MESH_CALIBRATE
gcode:
     ## Bed mesh knows about the probe offset, but not about the tool offset.
    RESPOND TYPE=echo MSG='TOOL_BED_MESH_CALIBRATE...'
    {% set tool_z_offset = printer[printer.toolchanger.tool].gcode_z_offset %}
    G90 ; absolute mode
    G0 Z10 F1000
    SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
    BASE_BED_MESH_CALIBRATE ADAPTIVE=1
    G0 Z10 F1000
    SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}

#--------------------------------------------------------------------
[gcode_macro QUAD_GANTRY_LEVEL]
description: check calibration probe and initialse toolhead before QGL
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    ## This macro done as such to overcomes some Klipper macro variable quirk.
    _CPI_CHECK
    _QGL

#--------------------------------------------------------------------
[gcode_macro M106]
description: Override "M106" to allow multiple extruders.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
  S= Target temperature
;Need rename is used with multi_fan
;rename_existing: M106.1
gcode:
  {% set raw_speed = params.S|default(0)|float %}
  {% set fan_speed = (raw_speed / 255.0)|round(2) %}
  {% set tn = params.T|default(printer.tool_probe_endstop.active_tool_number)|int %}
  {% set tool = printer.toolchanger.tool_names[tn]|default('') %}
  {% set fan_name = '' %}

  {% if tool in printer %}
    {% set fan_name = printer[tool].fan.split(' ')[1] %}
  {% endif %}

  ### other user define FAN
  SET_FAN_SPEED FAN={fan_name} SPEED={fan_speed}


#--------------------------------------------------------------------
[gcode_macro M107]
description: Override "M107" to allow multiple extruders.
  T= Tool number, optional. If this parameter is not provided, the current tool is used.
;Need rename is used with multi_fan
;rename_existing: M107.1
gcode:
  M106 S0 {rawparams}

####################################################################################
#	                         Other Functions
####################################################################################
#--------------------------------------------------------------------
[gcode_macro A_CONFIG_TOGGLE]
description: Toggle between the config with-dock and without-dock
gcode:
    {% set center_x = printer["gcode_macro _home"].xh|float %}
    {% set center_y = printer["gcode_macro _home"].yh|float %}
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 X{center_x} Y{center_y} Z150 F9000
    {% endif %}
    M400
    SAVE_CONFIG_MODE
    M400
    TOGGLE_CONFIG_MODE
    M400
    FIRMWARE_RESTART

####################################################################################
#                        Hidden
####################################################################################
#--------------------------------------------------------------------
[gcode_macro _CPI_CHECK]
gcode:
    TOOL_CALIBRATE_QUERY_PROBE
    M400
    
#--------------------------------------------------------------------
[gcode_macro _QGL]
gcode:
    {% if printer.tools_calibrate.calibration_probe_inactive %}
        INITIALIZE_TOOLCHANGER
        _QUAD_GANTRY_LEVEL
    {% else %}
        RESPOND TYPE=error MSG='CALIBRATION PROBE NOT DOCKED!!!'
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
  {% set max_temp = params.TEMP|default(150)|int %}
  {% set actual_temp = printer[params.HEATER].temperature %}
  {% set target_temp = printer[params.HEATER].target %}
  {% if target_temp > max_temp %}
    { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
    SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp }
  {% endif %}
  # Temperature target is already low enough, but nozzle may still be too hot.
  {% if actual_temp > max_temp + 2 %}
    { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
    TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
  {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TOOL_BEFORE_CHANGE]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% if printer["gcode_macro T" + tool.tool_number|string ] %}
    SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="''"
  {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TOOL_AFTER_CHANGE]
gcode:
  {% set tn = params.TN|string %}
  {% set tool = printer['tool ' + tn] %}
  {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  {% if printer["gcode_macro T" + tool.tool_number|string ] %}
    SET_GCODE_VARIABLE MACRO=T{tool.tool_number} VARIABLE=color VALUE="'c44'"
  {% endif %}
  {% if 'input_shaper' in printer.configfile.config %}
    {% set default_x_freq = printer.configfile.config['input_shaper']['shaper_freq_x']|default(0)|float %}
    {% set default_x_type = printer.configfile.config['input_shaper']['shaper_type_x']|default('mzv')|string %}
    {% set default_x_damping = printer.configfile.config['input_shaper']['damping_ratio_x']|default(0.1)|float %}
    {% set default_y_freq = printer.configfile.config['input_shaper']['shaper_freq_y']|default(0)|float %}
    {% set default_y_type = printer.configfile.config['input_shaper']['shaper_type_y']|default('mzv')|string %}
    {% set default_y_damping = printer.configfile.config['input_shaper']['damping_ratio_y']|default(0.1)|float %}
    SET_INPUT_SHAPER SHAPER_TYPE_X={tool.params_input_shaper_type_x if tool.params_input_shaper_type_x else default_x_type} SHAPER_FREQ_X={tool.params_input_shaper_freq_x if tool.params_input_shaper_freq_x else default_x_freq} SHAPER_TYPE_Y={tool.params_input_shaper_type_y if tool.params_input_shaper_type_y else default_y_type} SHAPER_FREQ_Y={tool.params_input_shaper_freq_y if tool.params_input_shaper_freq_y else default_y_freq} DAMPING_RATIO_X={tool.params_input_shaper_damping_ratio_x if tool.params_input_shaper_damping_ratio_x else default_x_damping} DAMPING_RATIO_Y={tool.params_input_shaper_damping_ratio_y if tool.params_input_shaper_damping_ratio_y else default_y_damping}
  {% endif %}

#--------------------------------------------------------------------
[gcode_macro _TOOL_DROPOFF]
gcode:
  ## Variables
    {% set tn = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set safe_y = tool.params_safe_y|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set min_z = tool.params_min_z|float %}
    ## Move toward dock
    G90
    {% if cur_z < min_z %}
        G0 X{x} Y{safe_y} Z{min_z} F{fast}
    {% else %}
        G0 X{x} Y{safe_y} Z{[cur_z+1.0, max_z]|min} F{fast}
    {% endif %}
    G0 Y{y + path[0]['y']|float} F{fast}    # Move to the first point in the path, in the y axis
    M400                                      # Clear cache
    G4 P400                                   # Pause and wait for physical stability
    M400                                      # Clear cache
    STOP_TOOL_PROBE_CRASH_DETECTION           # Stop crash detection
    M400                                      # Clear cache
    ## Run the path
    {% for pos in path %}
        {% if pos['d']|int == 1 %}
            G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float)}
        {% endif %}
    {% endfor %}

#--------------------------------------------------------------------
[gcode_macro _TOOL_PICKUP]
gcode:
  ## Variables
    {% set tn = params.TN|string %}
    {% set tool = printer['tool ' + tn] %}
    {% set x = tool.params_park_x|float %}
    {% set y = tool.params_park_y|float %}
    {% set z = tool.params_park_z|float %}
    {% set close_y = tool.params_close_y|float %}
    {% set fast = tool.params_fast_speed|float %}
    {% set path = tool['params_' ~ tool.params_type ~ '_path'] %}
    {% set wx = printer["gcode_macro _global_variable"].wipe_x|float %}
    {% set wy = printer["gcode_macro _global_variable"].wipe_y|float %}
    ## Fast to the last point
    G90
    G0 Y{close_y} F{fast}
    G0 X{x + path[-1]['x']|float} F{fast}
    G0 Y{y + path[-1]['y']|float} F{fast}
    ## Wait for temp before actually picking up the tool, while the nozzle is resting on it's pad.
    {% if tool.extruder %}
        {% set macroparameter = "gcode_macro T" ~ tool.tool_number|string %}
        {% if printer[macroparameter].print_temp > 0 and printer["gcode_macro _global_variable"].printing|int == 1 %}
            M109 T{tool.tool_number} S{printer[macroparameter].print_temp|int}
        {% else %}
            M109 T{tool.tool_number} S{printer[tool.extruder].target|int}
        {% endif %}
    {% endif %}
    ## Re-enable extruder motor
    SET_STEPPER_ENABLE STEPPER={tool.extruder} ENABLE=1
    ## Run the path in reverse
    {% for pos in path|reverse %}
        G0 X{x + pos['x']|float} Y{y + pos['y']|float} F{tool.params_path_speed|float * (pos.get('f', 1.0)|float) }
    {% endfor %}
    G0 Y{tool.params_safe_y} F{fast}          # Get to safe y
    M400                                      # Clear cache
    G4 P200                                   # Pause and wait for physical stability
    M400                                      # Clear cache
    ## Restore the position
    {% if 'X' in restore_position or 'Y' in restore_position or 'Z' in restore_position %}
        {% if 'X' in restore_position and 'Y' in restore_position and 'Z' in restore_position %}
            G0 X{restore_position.X} Y{restore_position.Y} Z{restore_position.Z} F{fast}
        {% else %}
            {% if 'X' in restore_position and 'Y' in restore_position %}
                G0 X{restore_position.X} Y{restore_position.Y} F{fast}
            {% else %}
                {% if 'X' in restore_position %}
                    G0 X{restore_position.X} F{fast}
                {% endif %}
                {% if 'Y' in restore_position %}
                    G0 Y{restore_position.Y} F{fast}
                {% endif %}
            {% endif %}
            {% if 'Z' in restore_position %}
                {% set macroparameter = "gcode_macro T" ~ tool.tool_number|string %}
                {% if wx > 0 and wy > tool.params_safe_y and restore_position.Z > 0.3 and printer[macroparameter].material|int != 2 %}
                    G0 X{wx - 0.4} Y{wy - 0.4} Z{restore_position.Z} F{fast}
                {% else %}
                    G0 Z{restore_position.Z} F{fast}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}
    ## Restore part cooling fan speed
    M106 S{printer["gcode_macro _TOOLCHANGER_VARS"].fan_speed} T{tn}

#--------------------------------------------------------------------
[gcode_macro _AFTER_TOOLCHANGE]
gcode:
    M400
    {% set macroparameter = "gcode_macro T" ~ printer.tool_probe_endstop.active_tool_number|string %}
    {% if printer["gcode_macro _global_variable"].printing|int == 1 %}
        {% if printer[macroparameter].material|int == 2 %}
            RESPOND TYPE=echo MSG='Clean PETG Nozzle...'
            _CLEAN_MID_PRINT
        {% endif %}
    {% else %}
        STOP_TOOL_PROBE_CRASH_DETECTION       # Stop crash detection
    {% endif %}

#--------------------------------------------------------------------
[gcode_macro _INITIALIZE_FROM_DETECTED_TOOL]
gcode:
  {% if printer.tool_probe_endstop.active_tool_number|int == -1 %} 
    {% if (printer.toolchanger.homing_toolless and 'z' in printer.toolhead.homed_axes) %}
      RESPOND TYPE=echo MSG='No tool found, picking up T{printer.toolchanger.tool_numbers[0]}'
      SELECT_TOOL T={printer.toolchanger.tool_numbers[0]} FORCE_PICKUP=1 RESTORE_AXIS=Z
      DETECT_ACTIVE_TOOL_PROBE
      INITIALIZE_TOOLCHANGER T={printer.toolchanger.tool_numbers[0]}
    {% else %}
      RESPOND TYPE=error MSG='Failed to detect active tool'
      PAUSE
    {% endif %}
  {% else %}
    INITIALIZE_TOOLCHANGER T={printer.tool_probe_endstop.active_tool_number}
  {% endif %}    

#--------------------------------------------------------------------
[gcode_macro _TOOLCHANGER_TURN_OFF_FANS]
description: Disable all extruder steppers
gcode:
  {% for tool_nr in printer.toolchanger.tool_numbers %}
    M107 T{tool_nr}
  {% endfor %}
