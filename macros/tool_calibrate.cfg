# Original written by Viesturs Zarins
# Modified by Chinh Nhan Vo, Dec 2024
#
#####################################################################
#                        Working
#####################################################################
#--------------------------------------------------------------------
[gcode_macro CALIBRATE_TRIGGER_BOTTOM]
gcode:
    {% set safe_z  = printer['gcode_macro _static_variable'].calibration_safe_z|float %}
    _CPI_CHECK
    {% if printer['quad_gantry_level'].applied == True and "xyz" in printer.toolhead.homed_axes %}
        _CHECK_PROBE
        _CALIBRATE_TRIGGER_BOTTOM
        G1 Z{safe_z} F9000
    {% else %}
        {% if printer['quad_gantry_level'].applied == False %}
            RESPOND TYPE=error MSG='Gantry is not LEVELED...'
        {% endif %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            RESPOND TYPE=error MSG='Printer is not HOMED...'
        {% endif %}
        {% if printer.tools_calibrate.calibration_probe_inactive == True %}
            RESPOND TYPE=error MSG='Calibration Probe is not in place...'
        {% endif %}
    {% endif %}
#--------------------------------------------------------------------
## This macro done as such to overcomes some Klipper macro variable quirk
[gcode_macro CALIBRATE_OFFSETS]
description: [TOOL=<index>]
    Offsets calibration
gcode:
    _CPI_CHECK
    {% if printer['quad_gantry_level'].applied == True and "xyz" in printer.toolhead.homed_axes %}
        {% if params.TOOL != null %}
            _CHECK_PROBE
            _CALIBRATE_OFFSETS TOOL={params.TOOL}
        {% else %}
            _CHECK_PROBE
            _CALIBRATE_OFFSETS
        {% endif %}
    {% else %}
        {% if printer['quad_gantry_level'].applied == False %}
            RESPOND TYPE=error MSG='Gantry is not LEVELED...'
        {% endif %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            RESPOND TYPE=error MSG='Printer is not HOMED...'
        {% endif %}
    {% endif %}

#####################################################################
#                        Hidden
#####################################################################
#--------------------------------------------------------------------
## For CALIBRATE_OFFSETS
#--------------------------------------------------------------------
[gcode_macro _CHECK_PROBE]
gcode:
    {% if printer.tools_calibrate.calibration_probe_inactive == False %}
        T0
        G28
        _CALIBRATE_MOVE_OVER_PROBE
        M400
        RESPOND TYPE=echo MSG='Check for calibration probe...'
        PROBE    # Probe to see if the Nudge is in place
        M400     # Clear cache
    {% endif %}
#--------------------------------------------------------------------
[gcode_macro _CALIBRATE_MOVE_OVER_PROBE]
gcode:
    {% set safe_z  = printer['gcode_macro _static_variable'].calibration_safe_z|float %}
    {% set probe_x = printer['gcode_macro _static_variable'].calibration_probe_x|float %}
    {% set probe_y = printer['gcode_macro _static_variable'].calibration_probe_y|float %}
    BED_MESH_CLEAR
    G0 Z{safe_z} F9000
    G0 X{probe_x} Y{probe_y}

#--------------------------------------------------------------------
[gcode_macro _CALIBRATE_MOVE_OVER_PROBE]
gcode:
    {% set safe_z  = printer['gcode_macro _static_variable'].calibration_safe_z|float %}
    {% set probe_x = printer['gcode_macro _static_variable'].calibration_probe_x|float %}
    {% set probe_y = printer['gcode_macro _static_variable'].calibration_probe_y|float %}
    BED_MESH_CLEAR
    G0 Z{safe_z} F9000
    G0 X{probe_x} Y{probe_y}

#--------------------------------------------------------------------
[gcode_macro _CALIBRATE_OFFSETS]
gcode:
    ## Variables
    {% set tools  = printer.toolchanger.tool_numbers %}
    {% set names  = printer.toolchanger.tool_names %}
    {% set safe_z = printer['gcode_macro _static_variable'].calibration_safe_z|float %}
    {% set abs_z  = printer['gcode_macro _static_variable'].calibration_abs_z_seperately|int %}
    {% set pause  = printer['gcode_macro _static_variable'].probe_stable_time|default(1000)|int %}
    ## Messages
    {% if params.TOOL != null %}
        {% if params.TOOL != 0 %}
            RESPOND TYPE=echo MSG='Calibrate T{params.TOOL}...'
        {% else %}
            RESPOND TYPE=echo MSG='Calibrate T0 absolute z offset...'
        {% endif %}
    {% else %}
        RESPOND TYPE=echo MSG='Calibrate all tools...'
    {% endif %}
    M400
    G4 P{pause}   # Pause and wait for physical stability
    M400
    ## Working routine
    {% if printer['quad_gantry_level'].applied == True and "xyz" in printer.toolhead.homed_axes and printer.tools_calibrate.calibration_probe_inactive == False %}
        {% if printer.toolhead.position[2]|float > printer['gcode_macro _static_variable'].calibration_min_z|float %}
            ## Start Probe Section
            G28
            _CALIBRATE_MOVE_OVER_PROBE
            TOOL_LOCATE_SENSOR
            {% if abs_z == 0 %}
                TOOL_CALIBRATE_PROBE_OFFSET PROBE="tool_probe T0"
            {% endif %}
            {% if params.TOOL != "0" %}
                {% if params.TOOL != null %}
                    SELECT_TOOL T={params.TOOL}  RESTORE_AXIS=XYZ
                    _AFTER_SELECT_TOOL TOOL={params.TOOL}
                    M400
                    G4 P{pause}   # Pause and wait for physical stability
                    M400
                    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0 MOVE=1
                    STOP_TOOL_PROBE_CRASH_DETECTION
                    TOOL_CALIBRATE_TOOL_OFFSET
                    TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="tool T{params.TOOL}" ATTRIBUTE=gcode_x_offset VALUE="{% raw %}{x:0.6f}{% endraw %}"
                    TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="tool T{params.TOOL}" ATTRIBUTE=gcode_y_offset VALUE="{% raw %}{y:0.6f}{% endraw %}"
                    TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="tool T{params.TOOL}" ATTRIBUTE=gcode_z_offset VALUE="{% raw %}{z:0.6f}{% endraw %}"
                    {% if abs_z == 0 %}
                        TOOL_CALIBRATE_PROBE_OFFSET PROBE="tool_probe T{params.TOOL}"
                    {% endif %}
                {% else %}
                    {% for tool in tools[1:] %}
                        SELECT_TOOL T={tool}  RESTORE_AXIS=XYZ
                        _AFTER_SELECT_TOOL TOOL={tool}
                        M400
                        G4 P{pause}   # Pause and wait for physical stability
                        M400
                        SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0 MOVE=1
                        STOP_TOOL_PROBE_CRASH_DETECTION
                        TOOL_CALIBRATE_TOOL_OFFSET
                        TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="{names[loop.index]}" ATTRIBUTE=gcode_x_offset VALUE="{% raw %}{x:0.6f}{% endraw %}"
                        TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="{names[loop.index]}" ATTRIBUTE=gcode_y_offset VALUE="{% raw %}{y:0.6f}{% endraw %}"
                        TOOL_CALIBRATE_SAVE_TOOL_OFFSET SECTION="{names[loop.index]}" ATTRIBUTE=gcode_z_offset VALUE="{% raw %}{z:0.6f}{% endraw %}"
                        {% if abs_z == 0 %}
                            TOOL_CALIBRATE_PROBE_OFFSET PROBE="tool_probe T{tool}"
                        {% endif %}
                    {% endfor %}
                {% endif %}
            {% endif %}
            T0
            G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y - 30} Z{safe_z} F9000
            ## End Probe Section
        {% else %}
            G1 Z{safe_z} F9000
            RESPOND TYPE=error MSG='Calibration Probe is not in place...'
        {% endif %}
    {% else %}
        {% if printer['quad_gantry_level'].applied == False %}
            RESPOND TYPE=error MSG='Gantry is not LEVELED...'
        {% endif %}
        {% if "xyz" not in printer.toolhead.homed_axes %}
            RESPOND TYPE=error MSG='Printer is not HOMED...'
        {% endif %}
        {% if printer.tools_calibrate.calibration_probe_inactive == True %}
            RESPOND TYPE=error MSG='Calibration Probe is not in place...'
        {% endif %}
    {% endif %}

#--------------------------------------------------------------------
## For CALIBRATE_TRIGGER_BOTTOM
#--------------------------------------------------------------------
[gcode_macro _CALIBRATE_TRIGGER_BOTTOM]
gcode:
    {% set safe_z  = printer['gcode_macro _static_variable'].calibration_safe_z|float %}
    {% set pin_z  = printer['gcode_macro _static_variable'].calibration_min_z|float %}
    {% set cur_z  = printer.toolhead.position[2]|float %}
    {% set pause  = printer['gcode_macro _static_variable'].probe_stable_time|default(1000)|int %}
    M400
    G4 P{pause}   # Pause and wait for physical stability
    M400
    {% if printer.tools_calibrate.calibration_probe_inactive == False and cur_z > pin_z %}
        G28
        _CALIBRATE_MOVE_OVER_PROBE
        TOOL_LOCATE_SENSOR
        _CTB_RECORD_SENSOR_Z
        G1 Z{safe_z} F9000
        PROBE
        _CTB_CALCULATE
    {% else %}
        G1 Z{safe_z} F9000
        RESPOND TYPE=error MSG='Calibration Probe is not in place...'
    {% endif %}
    
#--------------------------------------------------------------------
[gcode_macro _CTB_RECORD_SENSOR_Z]
gcode:
    {% set final_lift_z = printer['gcode_macro _static_variable'].final_lift_z|float %}
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set sensor_z = cur_z - final_lift_z %}
    M400
    SET_GCODE_VARIABLE  MACRO=_CTB_CALCULATE  VARIABLE=ref_offset  VALUE={printer['probe'].active_tool_probe_z_offset|float}
    SET_GCODE_VARIABLE  MACRO=_CTB_CALCULATE  VARIABLE=probe_position  VALUE={sensor_z}
    M400

#--------------------------------------------------------------------
[gcode_macro _CTB_CALCULATE]
variable_ref_offset = 0.0
variable_probe_position = 0.0
gcode:
    {% set cur_z = printer.toolhead.position[2]|float %}
    {% set trigger_z = probe_position - cur_z + ref_offset %}
    RESPOND TYPE=echo MSG='trigger_to_bottom_z: {trigger_z|round(6, 'common')}'
    RESPOND TYPE=echo MSG='Please copy-paste the value below to your [tools_calibrate]'
